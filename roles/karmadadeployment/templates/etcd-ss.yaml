apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ etcd_cluster_name }}
  namespace: {{ etcd_namespace }}
spec:
  serviceName: {{ etcd_cluster_name }}
  # changing replicas value will require a manual etcdctl member remove/add
  # command (remove before decreasing and add after increasing)
  replicas: {{ etcd_size }}
  #  updateStrategy:
  #    type: "RollingUpdate"
  #    rollingUpdate:
  #      partition: 3
  selector:
    matchLabels:
      etcd_cluster: {{ etcd_cluster_name }}
      app: {{ etcd_app_label }}
  template:
    metadata:
      name: {{ etcd_cluster_name }}
      labels:
        etcd_cluster: {{ etcd_cluster_name }}
        app: {{ etcd_app_label }}
    spec:
      containers:
      - name: "etcd"
        image: {{ etcd_image }}
        # readinessProbe:
        #  exec:
        #    command:
        #      - /bin/sh
        #      - -ec
        #      - "netstat -tulpn | grep 2379"
        #  failureThreshold: 3
        #  initialDelaySeconds: 3
        #  periodSeconds: 5
        #  successThreshold: 1
        #  timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -ec
              - ETCDCTL_API=3 etcdctl $(if $SECURE_CLIENT; then echo "--endpoints=https://$(hostname).${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379  --cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) endpoint status
          failureThreshold: 3
          initialDelaySeconds: 100
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: "{{ initial_size | default(etcd_size) }}"
        - name: CLUSTER_NAME
          value: "{{ etcd_cluster_name }}"
        - name: ETCDCTL_API
          value: "3"
        - name: "SECURE_PEER"
          value: "false"
        - name: "SECURE_SERVER"
          value: "true"
        - name: "SECURE_CLIENT"
          value: "true"
        volumeMounts:
        - name: data
          mountPath: /var/run/etcd
        - name: "member-peer-tls"
          mountPath: /etc/etcdtls/member/peer-tls
        - name: "member-server-tls"
          mountPath: /etc/etcdtls/member/server-tls
        - name: "etcd-client-tls"
          mountPath: /etc/etcdtls/operator/etcd-tls
        command:
        - "/bin/sh"
        - "-ecx"
        - |
          HOSTNAME=$(hostname)
          eps() {
              EPS=""
              for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                  EPS="${EPS}${EPS:+,}http$(if $SECURE_CLIENT; then echo "s"; fi)://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379"
              done
              echo ${EPS}
          }
          # store member id into PVC for later member replacement
          collect_member() {
              export ETCDCTL_ENDPOINTS=$(eps)
              while ! etcdctl $(if $SECURE_CLIENT; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member list &>/dev/null; do sleep 1; done
              while [ ! -s '/var/run/etcd/member_id' ];
              do
                etcdctl $(if $SECURE_CLIENT; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member list | grep ${HOSTNAME}.${CLUSTER_NAME}.*:2380 | cut -d',' -f1 > /var/run/etcd/member_id;
                sleep 1;
              done
              exit 0
          }
          member_hash() {
              etcdctl $(if SECURE_CLIENT; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member list | grep ${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 | cut -d',' -f1
          }
          # we should wait for other pods to be up before trying to join
          # otherwise we got "no such host" errors when trying to resolve other members
          # SET_ID=${HOSTNAME##*[^0-9]}
          # for i in $(seq 0 $((${SET_ID}))); do
          #   while true; do
          #        echo "Waiting for ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local to come up"
          #        nslookup ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local > /dev/null && break
          #        sleep 1s
          #    done
          #done
          # etcd-SET_ID
          SET_ID=${HOSTNAME##*[^0-9]}
          # adding a new member to existing cluster (assuming all initial pods are available)
          if [[ ${SET_ID} -ge ${INITIAL_CLUSTER_SIZE} ]]; then
            export ETCDCTL_ENDPOINTS=$(eps)
            # member already added?
            MEMBER_HASH=$(member_hash)
            if [ -n "${MEMBER_HASH}" ]; then
                # the member hash exists but for some reason etcd failed
                # as the datadir has not be created, we can remove the member
                # and retrieve new hash
                etcdctl $(if $SECURE_CLIENT; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member remove ${MEMBER_HASH}
            fi
            echo "Adding new member"
            etcdctl $(if $SECURE_CLIENT; then echo "--cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt"; fi) member add ${HOSTNAME} http$(if $SECURE_PEER; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs
            if [ $? -ne 0 ]; then
                echo "Exiting"
                rm -f /var/run/etcd/new_member_envs
                exit 1
            fi
            sleep 1
            cat /var/run/etcd/new_member_envs
            source /var/run/etcd/new_member_envs
            # collect_member &
            exec etcd --name ${HOSTNAME} \
                --listen-peer-urls http$(if $SECURE_PEER; then echo "s"; fi)://0.0.0.0:2380 \
                --listen-client-urls http$(if $SECURE_CLIENT; then echo "s"; fi)://0.0.0.0:2379 \
                --advertise-client-urls http$(if $SECURE_CLIENT; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379 \
                --data-dir /var/run/etcd/default.etcd \
                $(if SECURE_PEER; then
                --initial-advertise-peer-urls http$(if $SECURE_PEER; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380
                fi) \
                --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE} \
                $(if SECURE_PEER; then
                  echo "--peer-client-cert-auth=true --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key";
                fi) \
                $(if $SECURE_SERVER; then
                echo "--client-cert-auth=true --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt --cert-file=/etc/etcdtls/member/server-tls/server.crt --key-file=/etc/etcdtls/member/server-tls/server.key";
                fi)
          fi
          # re-joining after failure?
           if [[ -e /var/run/etcd/member_id ]]; then
               echo "Re-joining etcd member"
               member_id=$(cat /var/run/etcd/member_id)
               if [ -z "$member_id" ]
                 then
                       rm /var/run/etcd/member_id
                       while [ -e /var/run/etcd/member_id ]; do sleep 1; done
                       exit 1
                 fi
               # re-join member
               ETCDCTL_ENDPOINTS=$(eps) etcdctl member update ${member_id} http$(if $SECURE_PEER; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380 | true
               sleep 1
               exec etcd --name ${HOSTNAME} \
                   --listen-peer-urls http$(if SECURE_PEER; then echo "s"; fi)://0.0.0.0:2380 \
                   --listen-client-urls http$(if $SECURE_CLIENT; then echo "s"; fi)://0.0.0.0:2379\
                   --advertise-client-urls http$(if $SECURE_CLIENT; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379 \
                   --data-dir /var/run/etcd/default.etcd \
                  $(if SECURE_PEER; then
                    echo "--peer-client-cert-auth=true --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key";
                  fi) \
                  $(if $SECURE_SERVER; then
                  echo "--client-cert-auth=true --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt --cert-file=/etc/etcdtls/member/server-tls/server.crt --key-file=/etc/etcdtls/member/server-tls/server.key";
                  fi)
           fi
          PEERS=""
          for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              PEERS="${PEERS}${PEERS:+,}${CLUSTER_NAME}-${i}=http$(if $SECURE_PEER; then echo "s"; fi)://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380"
          done
          # collect_member &
          # join member
          exec etcd --name ${HOSTNAME} \
              $(if $SECURE_PEER; then
              --initial-advertise-peer-urls http$(if $SECURE_PEER; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2380
              fi) \
              --listen-peer-urls http$(if $SECURE_PEER; then echo "s"; fi)://0.0.0.0:2380 \
              --listen-client-urls http$(if $SECURE_CLIENT; then echo "s"; fi)://0.0.0.0:2379 \
              --advertise-client-urls http$(if $SECURE_CLIENT; then echo "s"; fi)://${HOSTNAME}.${CLUSTER_NAME}.{{ etcd_namespace }}.svc.cluster.local:2379 \
              --initial-cluster-token {{ etcd_cluster_name }} \
              --initial-cluster ${PEERS} \
              --initial-cluster-state new \
              --data-dir /var/run/etcd/default.etcd \
              --logger=zap \
              --quota-backend-bytes=8589934592 \
              $(if $SECURE_PEER; then
                echo "--peer-client-cert-auth=true --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key";
              fi) \
              $(if $SECURE_SERVER; then
              echo "--client-cert-auth=true --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt --cert-file=/etc/etcdtls/member/server-tls/server.crt --key-file=/etc/etcdtls/member/server-tls/server.key";
              fi)
      volumes:
      - name: "member-peer-tls"
        secret:
          secretName: {{ etcd_peer_secret_name }}
      - name: "member-server-tls"
        secret:
          secretName: {{ etcd_server_secret_name }}
      - name: "etcd-client-tls"
        secret:
          secretName: {{ etcd_client_secret_name }}
{% if etcd_storage_type == "hostPath" %}
      - hostPath:
          path: /var/lib/{{ etcd_namespace }}/karmada-etcd
          type: DirectoryOrCreate
        name: data
{% endif %}
{% if etcd_storage_type == "pvc" %}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      storageClassName: {{ etcd_pvc_storage_class }}
      resources:
        requests:
          storage: {{ etcd_pvc_size }}
{% endif %}

