---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: karmadadeployments.install.karmada.io
spec:
  group: install.karmada.io
  names:
    kind: KarmadaDeployment
    listKind: KarmadaDeploymentList
    plural: karmadadeployments
    shortNames:
    - kmd
    - kmds
    singular: karmadadeployment
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.mode
      name: Mode
      type: string
    - jsonPath: .status.phase
      name: Phase
      type: string
    - jsonPath: .status.controlPlaneReady
      name: Status
      type: string
    - description: CreationTimestamp is a timestamp representing the server time when
        this object was created. It is not guaranteed to be set in happens-before
        order across separate operations. Clients may not set this value. It is represented
        in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: KarmadaDeployment enables declarative installation of karmada.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired behavior of the KarmadaDeployment.
            properties:
              controlPlane:
                description: All of config of karmada control plane installtion.
                properties:
                  chartExtraValues:
                    description: support extar chart values to a configmap, the chart
                      values format exactly reference to origin chart value.yaml.
                    properties:
                      name:
                        description: Name is the name of resource being referenced.
                        type: string
                      namespace:
                        description: Namespace is the namespace for the resource being
                          referenced.
                        type: string
                    type: object
                  components:
                    description: optional karmada components, no components be installed
                      by defualt. component value must be enum.
                    items:
                      description: karmada components, these are optional components
                        for karmada and they does not affect the normal feature of
                        karmada.
                      type: string
                    type: array
                  endPointCfg:
                    description: the install cluster access credentials,if not specified,
                      it will be installed in the cluster where the operator is located
                      by default. There are two way to connect cluster, one is by
                      kubeconfig file path. two is restore the credentials in the
                      secret.
                    properties:
                      controlPlaneEndpoint:
                        description: The API endpoint of the member cluster. This
                          can be a hostname, hostname:port, IP or IP:port.
                        type: string
                      kubeconfig:
                        type: string
                      secretRef:
                        description: 'SecretRef represents the secret contains mandatory
                          credentials to access the member cluster. The secret should
                          hold credentials as follows: - secret.data.token - secret.data.caBundle'
                        properties:
                          name:
                            description: Name is the name of resource being referenced.
                            type: string
                          namespace:
                            description: Namespace is the namespace for the resource
                              being referenced.
                            type: string
                        type: object
                    type: object
                  etcd:
                    description: 'For karmada, two types etcd can be used: Internal
                      etcd: must be installed by operator. storageMode: epmtydir,
                      hostPath, pvc External etcd: not need be installed by operator.'
                    properties:
                      size:
                        description: If specified StorageMode is PVC, Size must be
                          set.
                        type: string
                      storageClass:
                        description: If specified StorageMode is PVC, StorageClass
                          must be set.
                        type: string
                      storageMode:
                        description: 'TODO: support external etcd. StorageMode etcd
                          data storage mode(emptyDir,hostPath, PVC), default "emptyDir"'
                        type: string
                    type: object
                  installCRD:
                    description: default is true, if not installed karmada crd resources
                      in cluster, please set it to false.
                    type: boolean
                  modules:
                    description: set karmada modules images and replicas separately.
                      the module name must be enum.
                    items:
                      properties:
                        image:
                          type: string
                        name:
                          description: karmada module name, the name must be
                          enum:
                          - scheduler
                          - webhook
                          - controllerManager
                          - agent
                          - aggregatedApiServer
                          - etcd
                          - apiServer
                          - kubeControllerManager
                          - schedulerEstimator
                          - descheduler
                          - search
                          type: string
                        replicas:
                          description: Number of desired pods. This is a pointer to
                            distinguish between explicit zero and not specified. Defaults
                            to 1.
                          format: int32
                          type: integer
                      type: object
                    type: array
                  namespace:
                    description: specified namespace to karmada, if not specified
                      defualt "karmada-system".
                    type: string
                  serviceType:
                    description: ServiceType represents the sevice type of karmada
                      apiserver. it is Nodeport by default.
                    type: string
                type: object
              images:
                description: set global images registry and version, kubenetes original
                  images and karmada images can be set up separately. If there is
                  nil, will use the default images to install.
                properties:
                  dockerIoRegistry:
                    description: the registry of cfssl and kubectl, default is "docker.io".
                    type: string
                  karmadaRegistry:
                    description: karmada regisrty, default is "swr.ap-southeast-1.myhuaweicloud.com".
                      all of karmada images is effect by the param.
                    type: string
                  karmadaVersion:
                    description: karmada images version, default is "latest". all
                      of karmada images is effect by the param.
                    type: string
                  kubeRegistry:
                    description: the registry of kube-apiserver and kube-controller-manager,
                      default is "k8s.gcr.io".
                    type: string
                  kubeVersion:
                    description: the iamge version of kube-apiserver and kube-controller-manager.
                    type: string
                type: object
              mode:
                description: mode of karmada installtion, can be "Helm" or "Karmadactl",
                  Default is Helm.
                enum:
                - Helm
                - Karmadactl
                type: string
            type: object
          status:
            description: Most recently observed status of the KarmadaDeployment.
            properties:
              conditions:
                description: Conditions represents the latest available observations
                  of a karmadaDeployment's current state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{ // Represents the observations of a foo's
                    current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              controlPlaneReady:
                description: ControlPlaneReady represent karmada cluster is health
                  status.
                type: boolean
              karmadaVersion:
                description: KarmadaVersion represente the karmada verison.
                type: string
              kubernetesVersion:
                description: KubernetesVersion represente the karmada-apiserver version.
                type: string
              observedGeneration:
                description: ObservedGeneration is the last observed generation.
                format: int64
                type: integer
              phase:
                description: the karmada installtion phase, must be enum type.
                type: string
              secretRef:
                description: after the karmada installed, restore the kubeconfig to
                  secret.
                properties:
                  name:
                    description: Name is the name of resource being referenced.
                    type: string
                  namespace:
                    description: Namespace is the namespace for the resource being
                      referenced.
                    type: string
                type: object
              summary:
                description: MemberClusterSummary gather all of member cluster summary
                  information.
                properties:
                  clusterSummary:
                    description: ClusterSummary represents the each member cluster
                      summary.
                    properties:
                      clusterConditions:
                        additionalProperties:
                          items:
                            description: "Condition contains details for one aspect
                              of the current state of this API Resource. --- This
                              struct is intended for direct use as an array at the
                              field path .status.conditions.  For example, type FooStatus
                              struct{ // Represents the observations of a foo's current
                              state. // Known .status.conditions.type are: \"Available\",
                              \"Progressing\", and \"Degraded\" // +patchMergeKey=type
                              // +patchStrategy=merge // +listType=map // +listMapKey=type
                              Conditions []metav1.Condition `json:\"conditions,omitempty\"
                              patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                              \n // other fields }"
                            properties:
                              lastTransitionTime:
                                description: lastTransitionTime is the last time the
                                  condition transitioned from one status to another.
                                  This should be when the underlying condition changed.  If
                                  that is not known, then using the time when the
                                  API field changed is acceptable.
                                format: date-time
                                type: string
                              message:
                                description: message is a human readable message indicating
                                  details about the transition. This may be an empty
                                  string.
                                maxLength: 32768
                                type: string
                              observedGeneration:
                                description: observedGeneration represents the .metadata.generation
                                  that the condition was set based upon. For instance,
                                  if .metadata.generation is currently 12, but the
                                  .status.conditions[x].observedGeneration is 9, the
                                  condition is out of date with respect to the current
                                  state of the instance.
                                format: int64
                                minimum: 0
                                type: integer
                              reason:
                                description: reason contains a programmatic identifier
                                  indicating the reason for the condition's last transition.
                                  Producers of specific condition types may define
                                  expected values and meanings for this field, and
                                  whether the values are considered a guaranteed API.
                                  The value should be a CamelCase string. This field
                                  may not be empty.
                                maxLength: 1024
                                minLength: 1
                                pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                                type: string
                              status:
                                description: status of the condition, one of True,
                                  False, Unknown.
                                enum:
                                - "True"
                                - "False"
                                - Unknown
                                type: string
                              type:
                                description: type of condition in CamelCase or in
                                  foo.example.com/CamelCase. --- Many .condition.type
                                  values are consistent across resources like Available,
                                  but because arbitrary conditions can be useful (see
                                  .node.status.conditions), the ability to deconflict
                                  is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                                maxLength: 316
                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                type: string
                            required:
                            - lastTransitionTime
                            - message
                            - reason
                            - status
                            - type
                            type: object
                          type: array
                        description: ClusterConditions is conditions of each cluster.
                        type: object
                      readyNum:
                        description: ReadyNum represents the resource in ready state.
                        format: int32
                        type: integer
                      totalNum:
                        description: TotalNum represents the total number of resource
                          of member cluster.
                        format: int32
                        type: integer
                    type: object
                  nodeSummary:
                    description: NodeSummary represents all nodes summary of all clusters.
                    properties:
                      clusterNodeSummary:
                        additionalProperties:
                          properties:
                            readyNum:
                              description: ReadyNum represents the resource in ready
                                state.
                              format: int32
                              type: integer
                            totalNum:
                              description: TotalNum represents the total number of
                                resource of member cluster.
                              format: int32
                              type: integer
                          type: object
                        description: ClusterNodeSummary is node summary of each cluster.
                        type: object
                      readyNum:
                        description: ReadyNum represents the resource in ready state.
                        format: int32
                        type: integer
                      totalNum:
                        description: TotalNum represents the total number of resource
                          of member cluster.
                        format: int32
                        type: integer
                    type: object
                  policyTotalNum:
                    additionalProperties:
                      format: int32
                      type: integer
                    description: 'PolicyTotalNum represent the total number of policy
                      resource. e.g: PropagationPolicy, OverridePolicy.'
                    type: object
                  resourceSummary:
                    description: ResourceSummary represents the summary of resources
                      in all of the member cluster.
                    properties:
                      allocatable:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Allocatable represents the resources of all clusters
                          that are available for scheduling. Total amount of allocatable
                          resources on all nodes of all clusters.
                        type: object
                      allocated:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Allocated represents the resources of all clusters
                          that have been scheduled. Total amount of required resources
                          of all Pods of all clusters that have been scheduled to
                          nodes.
                        type: object
                      allocating:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: Allocating represents the resources of all clusters
                          that are pending for scheduling. Total amount of required
                          resources of all Pods of all clusters that are waiting for
                          scheduling.
                        type: object
                      clusterResource:
                        additionalProperties:
                          properties:
                            allocatable:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Allocatable represents the resources of
                                all clusters that are available for scheduling. Total
                                amount of allocatable resources on all nodes of all
                                clusters.
                              type: object
                            allocated:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Allocated represents the resources of all
                                clusters that have been scheduled. Total amount of
                                required resources of all Pods of all clusters that
                                have been scheduled to nodes.
                              type: object
                            allocating:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: Allocating represents the resources of
                                all clusters that are pending for scheduling. Total
                                amount of required resources of all Pods of all clusters
                                that are waiting for scheduling.
                              type: object
                          type: object
                        description: ClusterResource represents the resources of each
                          cluster.
                        type: object
                    type: object
                  resourceTotalNum:
                    additionalProperties:
                      format: int32
                      type: integer
                    description: 'ResourceTotalNum represent the total number of distributed
                      resource on karmada control plane. e.g: service, ingress, pvc,
                      secret.'
                    type: object
                  workLoadSummary:
                    additionalProperties:
                      properties:
                        readyNum:
                          description: ReadyNum represents the resource in ready state.
                          format: int32
                          type: integer
                        totalNum:
                          description: TotalNum represents the total number of resource
                            of member cluster.
                          format: int32
                          type: integer
                      type: object
                    description: 'WorkLoadSummary represents all workLoads summary
                      of all clusters. e.g: deployment, statefulset.'
                    type: object
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
